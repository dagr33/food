  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      # 1) Write key â†’ absolute path + verify
      - name: Write SSH key
        run: |
          KEY="${GITHUB_WORKSPACE}/ec2_key.pem"
          umask 177
          cat > "$KEY" <<'EOF'
         ${{ secrets.EC2_SSH_KEY }}
         EOF
          # strip CRLF if any
          sed -i 's/\r$//' "$KEY"
          ls -l "$KEY"
          # quick sanity: should print a fingerprint
          ssh-keygen -l -f "$KEY"

      # 2) Smoke SSH (note: key_path is absolute)
      - name: Smoke SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ github.workspace }}/ec2_key.pem
          script: "echo OK && uname -a"
          timeout: 180s

      # 3) Prepare target dir (permissions + tar)
      - name: Prepare /opt/app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ github.workspace }}/ec2_key.pem
          script: |
            set -e
            sudo mkdir -p /opt/app
            sudo chown -R $USER:$USER /opt/app
            sudo apt-get update -y && sudo apt-get install -y tar

      # 4) Copy compose (use key_path, not key)
      - name: Copy compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ github.workspace }}/ec2_key.pem
          source:   "docker-compose.yaml"
          target:   "/opt/app/"
          overwrite: true
          rm: true
          debug: true

      # 5) Deploy
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ github.workspace }}/ec2_key.pem
          script: |
            set -e
            if ! command -v docker >/dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi
            if ! docker compose version >/dev/null 2>&1; then
              DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
              mkdir -p $DOCKER_CONFIG/cli-plugins
              curl -sSL https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64 \
                -o $DOCKER_CONFIG/cli-plugins/docker-compose
              chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
            fi
            REGISTRY_HOST="${{ env.REPO }}"; REGISTRY_HOST="${REGISTRY_HOST%%/*}"
            aws ecr get-login-password --region "${{ env.REGION }}" \
              | docker login --username AWS --password-stdin "$REGISTRY_HOST"
            cd /opt/app
            export ECR_REPO_URL="${{ env.REPO }}"
            docker compose pull
            docker compose up -d --remove-orphans
            docker compose ps
